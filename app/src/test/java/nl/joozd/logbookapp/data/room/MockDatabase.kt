/*
 *  JoozdLog Pilot's Logbook
 *  Copyright (c) 2020-2022 Joost Welle
 *
 *      This program is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU Affero General Public License as
 *      published by the Free Software Foundation, either version 3 of the
 *      License, or (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU Affero General Public License for more details.
 *
 *      You should have received a copy of the GNU Affero General Public License
 *      along with this program.  If not, see https://www.gnu.org/licenses
 *
 */

package nl.joozd.logbookapp.data.room

import androidx.room.DatabaseConfiguration
import androidx.room.InvalidationTracker
import androidx.sqlite.db.SupportSQLiteOpenHelper
import nl.joozd.logbookapp.data.room.dao.*

class MockDatabase: JoozdlogDatabase() {
    override fun flightDao(): FlightDao {
        TODO("Not yet implemented")
    }

    override fun airportDao(): AirportDao {
        TODO("Not yet implemented")
    }

    override fun aircraftTypeDao(): AircraftTypeDao = MockAircraftTypeDao()

    override fun registrationDao(): RegistrationDao = MockRegstrationDao()

    override fun aircraftTypeConsensusDao(): AircraftTypeConsensusDao {
        TODO("Not yet implemented")
    }

    override fun preloadedRegistrationsDao(): PreloadedRegistrationsDao = MockPreloadedRegistrationsDao()

    override fun balanceForwardDao(): BalanceForwardDao {
        TODO("Not yet implemented")
    }

    /**
     * Creates the open helper to access the database. Generated class already implements this
     * method.
     * Note that this method is called when the RoomDatabase is initialized.
     *
     * @param config The configuration of the Room database.
     * @return A new SupportSQLiteOpenHelper to be used while connecting to the database.
     */
    override fun createOpenHelper(config: DatabaseConfiguration?): SupportSQLiteOpenHelper {
        TODO("Not yet implemented")
    }

    /**
     * Called when the RoomDatabase is created.
     *
     *
     * This is already implemented by the generated code.
     *
     * @return Creates a new InvalidationTracker.
     */
    override fun createInvalidationTracker(): InvalidationTracker {
        return InvalidationTracker(this)
    }

    /**
     * Deletes all rows from all the tables that are registered to this database as
     * [Database.entities].
     *
     *
     * This does NOT reset the auto-increment value generated by [PrimaryKey.autoGenerate].
     *
     *
     * After deleting the rows, Room will set a WAL checkpoint and run VACUUM. This means that the
     * data is completely erased. The space will be reclaimed by the system if the amount surpasses
     * the threshold of database file size.
     *
     * @see [Database File Format](https://www.sqlite.org/fileformat.html)
     */
    override fun clearAllTables() {
        TODO("Not yet implemented")
    }
}